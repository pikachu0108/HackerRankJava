/*Perform push and pop operations on stack. Implement Stacks and avoid using inbuilt library.
Input Format
First line of input contains T - number of operations. Its followed by T lines, each line contains either "push x" or "pop".

Constraints
1 <= T <= 10000 -100 <= x <= 100

Output Format:For each "pop" operation, print the popped element, separated by newline. If the stack is empty, print "Empty".

Sample Input 0

8
push 5
pop
pop
push 10
push -15
pop
push -10
pop
Sample Output 0

5
Empty
-15
-10
import java.io.*;
import java.util.*;
class Stack {
    int st[] = new int[10001];
    int top;
    Stack()
    {
        top = -1;
    }
    void push(int data)
    {
        top++;
        st[top] = data;
    }
    void pop()
    {
        if(top==-1)
            System.out.println("Empty");
        else
        {
            System.out.println(st[top]);
            st[top] = 0;
            top--;  
        }
    }
}

public class Solution {
   
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Stack stk = new Stack();
        int t = sc.nextInt();
        while(t-->0)
        {
            String p = sc.next();
            if(p.charAt(1)=='o')
            {
                stk.pop();
            }
            else
            {
                int data = Integer.parseInt(sc.next());
                stk.push(data);
            }
        }
    }
}
